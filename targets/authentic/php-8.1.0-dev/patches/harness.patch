diff --git a/sapi/cli/php_cli_server.c b/sapi/cli/php_cli_server.c
index 6511e08c9af..a72c2207d47 100644
--- a/sapi/cli/php_cli_server.c
+++ b/sapi/cli/php_cli_server.c
@@ -108,6 +108,24 @@ static pid_t	*php_cli_server_workers;
 static zend_long php_cli_server_workers_max;
 #endif
 
+#define send(sockfd, buf, len, flags) write(1, buf, len)
+#define closesocket(sockfd) exit(0)
+#define shutdown(sockfd, how) exit(0)
+
+#ifndef __AFL_FUZZ_TESTCASE_LEN
+  ssize_t fuzz_len;
+  #define __AFL_FUZZ_TESTCASE_LEN fuzz_len
+  unsigned char fuzz_buf[1024000];
+  #define __AFL_FUZZ_TESTCASE_BUF fuzz_buf
+  #define __AFL_FUZZ_INIT() void sync(void);
+  #define __AFL_LOOP(x) ((fuzz_len = read(0, fuzz_buf, sizeof(fuzz_buf))) > 0 ? 1 : 0)
+  #define __AFL_INIT() sync()
+#endif
+
+__AFL_FUZZ_INIT();
+int afl_len = 0;
+unsigned char* afl_buf = NULL;
+
 typedef struct php_cli_server_poller {
 	fd_set rfds, wfds;
 	struct {
@@ -1757,7 +1775,8 @@ static int php_cli_server_client_read_request(php_cli_server_client *client, cha
 	if (client->request_read) {
 		return 1;
 	}
-	nbytes_read = recv(client->sock, buf, sizeof(buf) - 1, 0);
+	if (afl_len > sizeof(buf) - 1) return 0;
+	nbytes_read = afl_len;
 	if (nbytes_read < 0) {
 		int err = php_socket_errno();
 		if (err == SOCK_EAGAIN) {
@@ -1777,10 +1796,10 @@ static int php_cli_server_client_read_request(php_cli_server_client *client, cha
 		return -1;
 	}
 	client->parser.data = client;
-	nbytes_consumed = php_http_parser_execute(&client->parser, &settings, buf, nbytes_read);
+	nbytes_consumed = php_http_parser_execute(&client->parser, &settings, (const char*) afl_buf, nbytes_read);
 	if (nbytes_consumed != (size_t)nbytes_read) {
 		if (php_cli_server_log_level >= PHP_CLI_SERVER_LOG_ERROR) {
-			if ((buf[0] & 0x80) /* SSLv2 */ || buf[0] == 0x16 /* SSLv3/TLSv1 */) {
+			if ((afl_buf[0] & 0x80) /* SSLv2 */ || afl_buf[0] == 0x16 /* SSLv3/TLSv1 */) {
 				*errstr = estrdup("Unsupported SSL request");
 			} else {
 				*errstr = estrdup("Malformed HTTP request");
@@ -1866,7 +1885,7 @@ static int php_cli_server_client_ctor(php_cli_server_client *client, php_cli_ser
 	{
 		zend_string *addr_str = 0;
 
-		php_network_populate_name_from_sockaddr(addr, addr_len, &addr_str, NULL, 0);
+		addr_str = strpprintf(0, "test");
 		client->addr_str = pestrndup(ZSTR_VAL(addr_str), ZSTR_LEN(addr_str), 1);
 		client->addr_str_len = ZSTR_LEN(addr_str);
 		zend_string_release_ex(addr_str, 0);
@@ -2417,7 +2436,7 @@ static int php_cli_server_ctor(php_cli_server *server, const char *addr, const c
 		goto out;
 	}
 
-	server_sock = php_network_listen_socket(host, &port, SOCK_STREAM, &server->address_family, &server->socklen, &errstr);
+	server_sock = dup2(0, 3);
 	if (server_sock == SOCK_ERR) {
 		php_cli_server_logf(PHP_CLI_SERVER_LOG_ERROR, "Failed to listen on %s:%d (reason: %s)", host, port, errstr ? ZSTR_VAL(errstr) : "?");
 		if (errstr) {
@@ -2564,7 +2583,7 @@ static int php_cli_server_do_event_for_each_fd_callback(void *_params, php_socke
 		php_socket_t client_sock;
 		socklen_t socklen = server->socklen;
 		struct sockaddr *sa = pemalloc(server->socklen, 1);
-		client_sock = accept(server->server_sock, sa, &socklen);
+		client_sock = 0;
 		if (!ZEND_VALID_SOCKET(client_sock)) {
 			if (php_cli_server_log_level >= PHP_CLI_SERVER_LOG_ERROR) {
 				char *errstr = php_socket_strerror(php_socket_errno(), NULL, 0);
@@ -2622,7 +2641,7 @@ static int php_cli_server_do_event_loop(php_cli_server *server) /* {{{ */
 {
 	int retval = SUCCESS;
 	while (server->is_running) {
-		struct timeval tv = { 1, 0 };
+		struct timeval tv = { 0, 0 };
 		int n = php_cli_server_poller_poll(&server->poller, &tv);
 		if (n > 0) {
 			php_cli_server_do_event_for_each_fd(server,
@@ -2755,7 +2774,18 @@ int do_cli_server(int argc, char **argv) /* {{{ */
 
 	zend_signal_init();
 
-	php_cli_server_do_event_loop(&server);
+#ifdef __AFL_HAVE_MANUAL_CONTROL
+	__AFL_INIT();
+#endif  // __AFL_HAVE_MANUAL_CONTROL
+	write(-1, "__ROSAS_CANTINA__", 17);
+	afl_buf = __AFL_FUZZ_TESTCASE_BUF;
+
+	while (__AFL_LOOP(UINT_MAX)) {
+		afl_len = __AFL_FUZZ_TESTCASE_LEN;
+
+		php_cli_server_do_event_loop(&server);
+	}
+
 	php_cli_server_dtor(&server);
 	return 0;
 } /* }}} */
